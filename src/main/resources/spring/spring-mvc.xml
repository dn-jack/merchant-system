<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.dongnao" />
	 <mvc:annotation-driven>
	    <mvc:message-converters register-defaults="true">
	    <bean class="org.springframework.http.converter.StringHttpMessageConverter">
	      <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
	    </bean>
	   </mvc:message-converters>
   </mvc:annotation-driven>
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp" />

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<value>32505856</value><!-- 上传文件大小限制为31M，31*1024*1024 -->
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>org.gjt.mm.mysql.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://180.76.173.250:3306/cyz</value>
		</property>
		<property name="user">
			<value>root</value>
		</property>
		<property name="password">
			<value>jackciie@08*124dm</value>
		</property>  
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />  
		<property name="maxIdleTime" value="1800" />   
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<property name="idleConnectionTestPeriod" value="60" /> 
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
		<property name="acquireRetryDelay">  
     		<value>100</value>  
		</property>  
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<value>classpath*:com/dongnao/xml/*Mapper.xml</value>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
		<property name="basePackage" value="com.dongnao.dao"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
    
	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
    
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />-->
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="check*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="print*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<!-- 事物隔离级别配置，MySQL默认是 repeated-read 所以需要设置隔离级别为read-commit -->
			<tx:method name="*" propagation="REQUIRED" read-only="false" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<!--<tx:method name="update*" propagation="REQUIRED" read-only="false"
					rollback-for="java.lang.Exception" />
				<tx:method name="find*" propagation="SUPPORTS" />
				<tx:method name="get*" propagation="SUPPORTS" />
				<tx:method name="select*" propagation="SUPPORTS" />-->
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * com.dongnao.service.impl..*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
	
	<!-- Enable @Transactional support -->
	<!-- 使用annotation定义事务 
		<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />-->
    
	<!-- Enable @AspectJ support -->
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>

</beans>